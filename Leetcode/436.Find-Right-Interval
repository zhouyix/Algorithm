/*
 * @lc app=leetcode id=436 lang=java
 *
 * [436] Find Right Interval
 */
class Solution {
    public int[] findRightInterval(int[][] intervals) {
        HashMap<Integer,Integer> map = new HashMap<Integer,Integer>();
        int maxStart = Integer.MIN_VALUE;
        for(int i=0;i<intervals.length;i++){
            map.put(intervals[i][0],i);
            maxStart = Math.max(maxStart,intervals[i][0]);
        }

        int[] res = new int[intervals.length];
        for(int i=0;i<intervals.length;i++){
            boolean flag = false;
            for(int k=intervals[i][1];k<=maxStart;k++){
                if(map.containsKey(k)){
                    res[i] = map.get(k);
                    flag = true;
                    break;
                }
            }

            if(!flag){
                res[i] = -1;
            }
        }

        return res;
    }
}

//binary-search is better https://leetcode.com/problems/find-right-interval/discuss/337107/C-sort-start-then-binary-search
