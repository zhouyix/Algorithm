/*
 * @lc app=leetcode id=200 lang=java
 *
 * [200] Number of Islands
 *
 * https://leetcode.com/problems/number-of-islands/description/
 *
 * algorithms
 * Medium (40.10%)
 * Total Accepted:    322.6K
 * Total Submissions: 791.6K
 * Testcase Example:  '[["1","1","1","1","0"],["1","1","0","1","0"],["1","1","0","0","0"],["0","0","0","0","0"]]'
 *
 * Given a 2d grid map of '1's (land) and '0's (water), count the number of
 * islands. An island is surrounded by water and is formed by connecting
 * adjacent lands horizontally or vertically. You may assume all four edges of
 * the grid are all surrounded by water.
 * 
 * Example 1:
 * 
 * 
 * Input:
 * 11110
 * 11010
 * 11000
 * 00000
 * 
 * Output:Â 1
 * 
 * 
 * Example 2:
 * 
 * 
 * Input:
 * 11000
 * 11000
 * 00100
 * 00011
 * 
 * Output: 3
 * 
 */
class Solution {
    public int numIslands(char[][] grid) {
        int count = 0;
        for(int i=0;i<grid.length;i++)
            for(int j=0;j<grid[0].length;j++){
                if(grid[i][j] == '0'){
                    continue;
                }

                if(grid[i][j] == '1'){
                    dfs(grid,i,j);
                    count++;
                }

            }

        return count;
    }

    public void dfs(char[][] grid,int i,int j){
        grid[i][j] = '$';
        if(i-1 >=  0 && grid[i-1][j] == '1'){
            dfs(grid,i-1,j);
        }

        if(j-1 >=0  && grid[i][j-1] == '1'){
            dfs(grid,i,j-1);
        }

        if(i+1 < grid.length && grid[i+1][j] == '1'){
            dfs(grid,i+1,j);
        }

        if(j+1 < grid[0].length && grid[i][j+1] == '1'){
            dfs(grid,i,j+1);
        }
    }
}

